@startuml

package dronecontrollerlib #DDDDDD{
DCManager *-- Controller
DCManager *-- ArDroneCommander
DCManager *-- Factory
DCManager o-- Utility

ISubscriber <|-- DCManager
Controller <|-- MyoController
Controller <|-- WiiMoteController
Controller o-- ISubscriber
Controller o-- ArDroneCommand

class DCManager{
    +void OnReceivedCommand(ArDroneCommand cmd)
    +UseController(string type,string[] args)
}

abstract Factory{
    +Controller CreateController(string type,string[] args)
    +{abstract} Utility CreateUtility();
}
abstract Utility{
    + void trace(String trace);
    + void traceError(String trace,Exception ex);
}
class ArDroneCommand{
    +altitude_max
    +speed
    +action
}
class ArDroneCommander{
  -Ip
  +void takeOff()
  +void landing()
  +void rotate()
  +void command(ArDroneCommand cmd)
}

abstract Controller{
    -ISubscriber subscriber
    +void connect()
    +void diconnect()
    +void listen()
    +void subscribe(ISubscriber subscriber)
}

interface ISubscriber{
     +void onReceivedCommand(ArDroneCommand cmd);
}
class WiiMoteController {

}
class MyoController {
   
}
}

package dronecontrollerlibstd{
    Controller <|-- KeyboardController
    Factory <|-- StandardFactory
    Utility <|-- StandardUtility
    class KeyboardController{
    }
    class StandardFactory{
    }
    class StandardUtility{
    }
}
package dronecontrollerlibandroid{
    Controller <|-- SmartPhoneController
    Factory <|-- AndroidFactory
    Utility <|-- AndroidUtility
    class SmartPhoneController{
    }
    class AndroidFactory{
    }
    class AndroidUtility{
    }
}


@enduml